body {
    width: 100%;
    height: 100vh;
    /*View height. 1vh is 1% of the height of the viewport.
For example:
div {
  height: 50vh;
}
The div will fill 50% of the viewport's height. 
So if the browser window is 900 pixels high, the height of the div will be 450 pixels.
*/
    margin: 0;
    background-color: #1b1b32;
    color: #f5f6f7;
    font-family: Tahoma;
    font-size: 16px;
}

h1,
p {
    margin: 1em auto;
    /*1em=16px in this case
    When used with the font-size property, em inherits the font-size from its parent element:.
    In this example, the font-size of p is 16px (16 * 1). 
    Meanwhile, the font-size of h2 is 48px (16 * 3), and 32px for the h3 (16 * 2).
    */
    text-align: center;
}

form {
    margin: 0 auto;
    width: 60vw;
    /*
    View width. 1vw is 1% of the width of the viewport.
For example:
body {
  width: 100vw;
}
Since the body element is set to 100vw, or 100% of the viewport's width, 
it will take up the full width available to it. 
So if you resize your browser  to 690 pixels wide, then the body will take up all 690 pixels in width.
    */
    min-width: 300px;
    max-width: 500px;
    padding-bottom: 2em;
}

fieldset {
    border: none;
    /*to make border disappear*/
    padding: 2rem 0;
    /*
    Root em. This relative unit is not affected by the size or setting of a parent element, 
    and is instead based on the root of the document. 
    For websites, the root of the document is the html element.
p {
  font-size: 1.25rem;
}
In most browsers, the default font size is 16, so the font-size of html elements is 16px. 
So in this case, p is 20px (16 * 1.25).
But if a user changes their browser's default font size, then the font-size of p will scale up or down accordingly.
    */
}

fieldset:not(:last-of-type) {
    border-bottom: 3px solid #3b3b4f;
}

label {
    display: block;
    margin: 0.5rem 0;
}

input,
textarea,
select {
    width: 100%;
    margin: 10px 0 0 0;
    min-height: 2em;
}

input,
textarea {
    background-color: #0a0a23;
    border: 1px solid #0a0a23;
    color: #ffffff;
    /*min-height: 2em; moved to above*/
}

.inline {
    width: unset;
    /*Select only the .inline elements, and give them width of unset. 
    This will remove the earlier rule which set all the input elements to width: 100%.*/
    margin: 0 0.5em 0 0;
    vertical-align: middle;
}

input[type="submit"] {
    /*attribute selector,*/
    display: block;
    width: 60%;
    margin: 1em auto;
    height: 2em;
    font-size: 1.1rem;
    background-color: #3b3b4f;
    border-color: white;
    min-width: 300px;

}

input[type="file"] {
    padding: 1px 2px;
}

a {
    color: #dfdfe2;
}

/*
, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0.
The :last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.
Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.
If you look close enough, you will notice the .inline elements are too high on the line.To combat this, set the vertical-align property to middle.
To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example:  input[name="password"].

*/